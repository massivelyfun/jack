// Generated by CoffeeScript 1.6.2
(function() {
  var Appender, FileAppender, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  Appender = require("./appender");

  FileAppender = (function(_super) {
    __extends(FileAppender, _super);

    function FileAppender(options) {
      var file, _ref,
        _this = this;

      if (options == null) {
        options = {};
      }
      FileAppender.__super__.constructor.call(this);
      if (file = options.fileName) {
        this._logFile = fs.createWriteStream(file, {
          flags: 'a'
        });
      } else {
        throw new Error("No output file defined for FileAppender");
      }
      this._buffer = [];
      this._delta = (_ref = options.flushFrequency) != null ? _ref : 300;
      this._lastFlush = (+(new Date)) - (this._delta + 1);
      process.on('exit', function() {
        _this.flush();
        return _this._logFile.end();
      });
      process.on('SIGHUP', function() {
        _this.flush();
        _this._logFile.end();
        return _this._logFile = fs.createWriteStream(file, {
          flags: 'a'
        });
      });
    }

    FileAppender.prototype.append = function(loggerName, level, args) {
      var now,
        _this = this;

      this._buffer.push([loggerName, level, args]);
      now = +(new Date);
      if ((now - this._lastFlush) > this._delta) {
        return process.nextTick(function() {
          return _this.flush();
        });
      }
    };

    FileAppender.prototype.flush = function() {
      var bit, _results;

      this._lastFlush = +(new Date);
      _results = [];
      while (bit = this._buffer.shift()) {
        _results.push(this._logFile.write("" + (this.format(bit[0], bit[1], bit[2])) + "\n"));
      }
      return _results;
    };

    return FileAppender;

  })(Appender);

  module.exports = FileAppender;

}).call(this);

/*
//@ sourceMappingURL=fileAppender.map
*/
